// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: DFSgDk7xEF4uDtL4KTuii
// Component: ahCe1JIbpTo

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariants_793QbDbnmqZpDb } from "../visitors/PlasmicGlobalVariant__Screen"; // plasmic-import: 793qbDbnmqZPDb/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_visitors_css from "../visitors/plasmic_visitors.module.css"; // plasmic-import: w4yYo48qoeavp6MLu5USrX/projectcss
import projectcss from "./plasmic_blank_website.module.css"; // plasmic-import: DFSgDk7xEF4uDtL4KTuii/projectcss
import sty from "./PlasmicFooter2.module.css"; // plasmic-import: ahCe1JIbpTo/css

import PaperPlaneSvgrepoComsvgIcon from "./icons/PlasmicIcon__PaperPlaneSvgrepoComsvg"; // plasmic-import: wBPThB11rLD/icon
import EmailSvgrepoComsvgIcon from "./icons/PlasmicIcon__EmailSvgrepoComsvg"; // plasmic-import: vQL0a9Pgx6p/icon
import PhoneSvgrepoComsvgIcon from "./icons/PlasmicIcon__PhoneSvgrepoComsvg"; // plasmic-import: fD3byLmk8P8/icon

export type PlasmicFooter2__VariantMembers = {};
export type PlasmicFooter2__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter2__VariantsArgs;
export const PlasmicFooter2__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter2__ArgsType = {};
type ArgPropType = keyof PlasmicFooter2__ArgsType;
export const PlasmicFooter2__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter2__OverridesType = {
  root?: p.Flex<"div">;
  mail?: p.Flex<"svg">;
  mail2?: p.Flex<"svg">;
  svg?: p.Flex<"svg">;
};

export interface DefaultFooter2Props {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooter2__RenderFunc(props: {
  variants: PlasmicFooter2__VariantsArgs;
  args: PlasmicFooter2__ArgsType;
  overrides: PlasmicFooter2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_793QbDbnmqZpDb()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_visitors_css.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__wPvr)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___6Iqo1)}
        >
          <h6
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6__cQhQr
            )}
          >
            {"CONTACT"}
          </h6>
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___6PU9P)}
            >
              <PaperPlaneSvgrepoComsvgIcon
                data-plasmic-name={"mail"}
                data-plasmic-override={overrides.mail}
                className={classNames(projectcss.all, sty.mail)}
                role={"img"}
              />

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__rSXC
                )}
                component={Link}
                href={"/contact-us" as const}
                platform={"nextjs"}
              >
                {"Contact form"}
              </p.PlasmicLink>
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zsy1Q)}
            >
              <EmailSvgrepoComsvgIcon
                data-plasmic-name={"mail2"}
                data-plasmic-override={overrides.mail2}
                className={classNames(projectcss.all, sty.mail2)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___00K6
                )}
              >
                {"info@chania-rentals.com"}
              </div>
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__cAYo)}
            >
              <PhoneSvgrepoComsvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gbgVm
                )}
              >
                {"+30 2821800511"}
              </div>
            </p.Stack>
          ) : null}
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__wFsty)}
        >
          <h6
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6__g5Jk5
            )}
          >
            {"QUICK MENU"}
          </h6>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__xKqhs
            )}
            component={Link}
            href={"/" as const}
            onClick={async event => {
              const $steps = {};
              $steps["updateStateVariable"] = true
                ? (() => {
                    const actionArgs = {};
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariable",
                        interactionUuid: "KDDcbLnhs3",
                        componentUuid: "ahCe1JIbpTo"
                      },
                      () =>
                        (({ variable, value, startIndex, deleteCount }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;
                          undefined;
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["updateStateVariable"] === "object" &&
                typeof $steps["updateStateVariable"].then === "function"
              ) {
                $steps["updateStateVariable"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariable",
                    interactionUuid: "KDDcbLnhs3",
                    componentUuid: "ahCe1JIbpTo"
                  },
                  $steps["updateStateVariable"]
                );
              }
            }}
            platform={"nextjs"}
          >
            {"Home page"}
          </p.PlasmicLink>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__hJy5P
            )}
            component={Link}
            href={"/chania-villas/all-villas" as const}
            platform={"nextjs"}
          >
            {"Villas"}
          </p.PlasmicLink>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__cmnK0
            )}
            component={Link}
            href={"/chania-cars" as const}
            platform={"nextjs"}
          >
            {"Car rental"}
          </p.PlasmicLink>
        </p.Stack>
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___5PsvR)}
          >
            <h6
              className={classNames(
                projectcss.all,
                projectcss.h6,
                projectcss.__wab_text,
                sty.h6__avTBi
              )}
            >
              {"USEFUL INFO"}
            </h6>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__ugJq
              )}
              component={Link}
              href={"/about-us" as const}
              platform={"nextjs"}
            >
              {"About us"}
            </p.PlasmicLink>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___9ZFsj
              )}
              component={Link}
              href={"/faqs" as const}
              platform={"nextjs"}
            >
              {"FAQ's"}
            </p.PlasmicLink>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___2DPsF
              )}
              component={Link}
              href={"/how-to-book" as const}
              platform={"nextjs"}
            >
              {"How to book"}
            </p.PlasmicLink>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__p0G6
              )}
              component={Link}
              href={"/terms" as const}
              platform={"nextjs"}
            >
              {"Terms & Conditions"}
            </p.PlasmicLink>
          </p.Stack>
        ) : null}
      </p.Stack>
      <div className={classNames(projectcss.all, sty.freeBox__mkOy7)}>
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__jnz1L)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__a7X3Y
              )}
            >
              {"\u00a9 Chania-Rentals 2023"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__aYyik
              )}
            >
              {
                "Greek Tourism Organization Registration Number: MHTE 1042E60610124801"
              }
            </div>
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "mail", "mail2", "svg"],
  mail: ["mail"],
  mail2: ["mail2"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  mail: "svg";
  mail2: "svg";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter2__VariantsArgs;
    args?: PlasmicFooter2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooter2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooter2__ArgProps,
          internalVariantPropNames: PlasmicFooter2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter2";
  } else {
    func.displayName = `PlasmicFooter2.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter2 = Object.assign(
  // Top-level PlasmicFooter2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    mail: makeNodeComponent("mail"),
    mail2: makeNodeComponent("mail2"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicFooter2
    internalVariantProps: PlasmicFooter2__VariantProps,
    internalArgProps: PlasmicFooter2__ArgProps
  }
);

export default PlasmicFooter2;
/* prettier-ignore-end */
