// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: DFSgDk7xEF4uDtL4KTuii
// Component: jJomJF1Hmf

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { HomeCarousel } from "@/components/HomeCarousel"; // plasmic-import: qqFdwPcNt8/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_visitors_css from "../visitors/plasmic_visitors.module.css"; // plasmic-import: w4yYo48qoeavp6MLu5USrX/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_blank_website.module.css"; // plasmic-import: DFSgDk7xEF4uDtL4KTuii/projectcss
import sty from "./PlasmicFaqs.module.css"; // plasmic-import: jJomJF1Hmf/css

export type PlasmicFaqs__VariantMembers = {};
export type PlasmicFaqs__VariantsArgs = {};
type VariantPropType = keyof PlasmicFaqs__VariantsArgs;
export const PlasmicFaqs__VariantProps = new Array<VariantPropType>();

export type PlasmicFaqs__ArgsType = {};
type ArgPropType = keyof PlasmicFaqs__ArgsType;
export const PlasmicFaqs__ArgProps = new Array<ArgPropType>();

export type PlasmicFaqs__OverridesType = {
  root?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  homeCarousel?: p.Flex<typeof HomeCarousel>;
};

export interface DefaultFaqsProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFaqs__RenderFunc(props: {
  variants: PlasmicFaqs__VariantsArgs;
  args: PlasmicFaqs__ArgsType;
  overrides: PlasmicFaqs__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicFaqs.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicFaqs.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicFaqs.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicFaqs.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicFaqs.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicFaqs.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_visitors_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <h1
            data-plasmic-name={"h1"}
            data-plasmic-override={overrides.h1}
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1
            )}
          >
            {"Frequently asked questions"}
          </h1>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__yuUt)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jk6Oq)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3___3P7OK
                  )}
                >
                  {"How can I choose the right villa for me?"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fuXk9
                  )}
                >
                  {
                    "There are villas for all tastes and budgets. The first step is to think what you need. Who are you travelling with? Do you want to explore the island, or you need relaxation and isolation? Do you wish to be near the sea or inland? Will you rent a car? What kind of villa you prefer; modern or traditional? The best way to choose is to let us know what you need and we will help you find the perfect villa for you!"
                  }
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gSLx)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__rtUdB
                  )}
                >
                  {"Do I share the villa with other guests?"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___16Sue
                  )}
                >
                  {
                    "All our villas are private and you will be the only tenants in the property."
                  }
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__m0Cno)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3___1NTql
                  )}
                >
                  {"Is there flexibility with changeover days?"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__a51E
                  )}
                >
                  {
                    "The changeover days depend on the owners or the existing bookings. If you like a particular villa, please ask us for its changeover days."
                  }
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__mNNr3)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__ttQve
                  )}
                >
                  {"Is there a minimum night stay?"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__slvgd
                  )}
                >
                  {
                    "Generally, the minimum stay is 5 nights during low season and 7 nights during high season. However, some owners may accept a shorter stay, depending on the season, the proximity to the arrival day and the existing bookings. Please send us your dates and we will send you our options."
                  }
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__otJe4)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3___6MqGd
                  )}
                >
                  {"What time can I check-in on my arrival day?"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ogIVa
                  )}
                >
                  {
                    "The official check-in time for most villas is 15:00 (please check the check-in and check-out time in each description page). However, depending on the previous booking, an early check-in may be possible; we will know near your arrival day."
                  }
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__hEl2C)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__szdep
                  )}
                >
                  {"Is it possible to arrive very late?"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fSdHv
                  )}
                >
                  {
                    "You can check-in any time, even after midnight. Sometimes, in case of a late arrival, the owner will not be there. You will find the keys at a place that the owner will indicate and he will be available on phone if you need anything on arrival."
                  }
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__pUtU9)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__hjY2J
                  )}
                >
                  {"What time do I have to vacate the villa on my last day?"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xr8F4
                  )}
                >
                  {
                    "The official check-out time for most villas is 11:00 (please check the check-in and check-out time in each description page). However, depending on the next booking, a late check-out may be possible; we will know near your departure day."
                  }
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wgSu2)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__jg7Lk
                  )}
                >
                  {"Are pets allowed?"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dQb0Q
                  )}
                >
                  {"No, pets are not allowed in any of the villas."}
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rMje)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__a1Md4
                  )}
                >
                  {"Are events allowed?"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6O64
                  )}
                >
                  {"Events are not allowed in any of the villas."}
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__w7In4)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__m3P4I
                  )}
                >
                  {
                    "How do I get to the villa and where do I find the keys to the property?"
                  }
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kTyLb
                  )}
                >
                  {
                    "After the payment you will have access at a page on our site with all the details of your booking. From this page you will be able to download detailed directions to your villa. The owner will be waiting for you at the villa at the time that you will indicate on your reservation page. In the rare case when the owner will not be able to be at the villa at your arrival, we will inform you sooner about the check-in procedure."
                  }
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__z2V8Z)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__mRzBl
                  )}
                >
                  {"Can I have groceries in the villa on arrival?"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oRfD3
                  )}
                >
                  {
                    "You can send us a list with groceries for the first night and morning and the owner will purchase them for you. Most of the owners provide a welcome pack with traditional or seasonal products but usually they do not have a standard content."
                  }
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ji0U)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3___0SjyS
                  )}
                >
                  {"Are linen and towels provided?"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__njlq6
                  )}
                >
                  {
                    "Linen and bath towels are provided to all villas. Most villas also provide pool towels \u2013 you have to check the facilities of each individual villa. Beach towels are not provided."
                  }
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___0J2Fc)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3___51Fv
                  )}
                >
                  {"Is the cleaning included in the price?"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xPm5J
                  )}
                >
                  {
                    "Cleaning service \u2013 including change of linen and bath towels \u2013 is included in the price. The service is provided once or twice per week, depending on the villa. You will find more info in the description pages."
                  }
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xfhN8)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__vlm1K
                  )}
                >
                  {"What do I do with my rubbish at the property?"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ml1PX
                  )}
                >
                  {
                    "Usually there are bins near the villas; clients are expected to take their rubbish at the in the bins. Please ask the owner on arrival where is the nearest to your villa bin."
                  }
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__iwpYs)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__iVI4
                  )}
                >
                  {"If I encounter a problem at the property, who do I call?"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__b3Ua
                  )}
                >
                  {
                    "The owner will be always at your disposal, 24/7. If you cannot find the owner, you may call us or send us an email and we will reply as soon as possible."
                  }
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qkfE)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__rwFu3
                  )}
                >
                  {"Are there any hidden fees?"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__woHtk
                  )}
                >
                  {
                    "No, there are no hidden fees. Through our site you book without booking or service fee."
                  }
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rezJw)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__aArgX
                  )}
                >
                  {"Is it possible to include additional guests later?"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__twBuD
                  )}
                >
                  {
                    "Yes, as long as you are not more than the maximum number of persons that the villa can accommodate. If there is an extra charge per night per guests, it will be added at the rental cost. Keep in mind that we always need to know the final number of guests before your arrival."
                  }
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rdDlX)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3___6Opzb
                  )}
                >
                  {"Is a security deposit required?"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ow7KW
                  )}
                >
                  {
                    "A security deposit is not required. However, guests are responsible for any loss or damage caused to the property or its contents. Guests are required to report any damage to the owner and to bear the cost of repair or replacement."
                  }
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xrjSg)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3___1KMiW
                  )}
                >
                  {"How is the payment done?"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fpSxj
                  )}
                >
                  {
                    "To secure the booking a deposit is required, usually a 25% of the total price. You will find the required deposit amount in each description page. The payment can be made either with credit card online through our site or by bank transfer. When you decide to proceed to the booking of a villa you must send us a confirmation page and we will activate the payment form."
                  }
                </div>
              </p.Stack>
            ) : null}
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bhIfq)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__hfBLl
                  )}
                >
                  {"Will you send me a reminder when the balance is due?"}
                </h3>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__j8QOp
                  )}
                >
                  {
                    "Unfortunately our automated reminder system is not ready yet. If you want in advance, you must contact us at least 22 days before your arrival for the bank account details."
                  }
                </div>
              </p.Stack>
            ) : null}
          </p.Stack>
          <HomeCarousel
            data-plasmic-name={"homeCarousel"}
            data-plasmic-override={overrides.homeCarousel}
            className={classNames("__wab_instance", sty.homeCarousel)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h1", "homeCarousel"],
  h1: ["h1"],
  homeCarousel: ["homeCarousel"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  homeCarousel: typeof HomeCarousel;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFaqs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFaqs__VariantsArgs;
    args?: PlasmicFaqs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFaqs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFaqs__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFaqs__ArgProps,
          internalVariantPropNames: PlasmicFaqs__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFaqs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaqs";
  } else {
    func.displayName = `PlasmicFaqs.${nodeName}`;
  }
  return func;
}

export const PlasmicFaqs = Object.assign(
  // Top-level PlasmicFaqs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    homeCarousel: makeNodeComponent("homeCarousel"),

    // Metadata about props expected for PlasmicFaqs
    internalVariantProps: PlasmicFaqs__VariantProps,
    internalArgProps: PlasmicFaqs__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "faqs | Chania Rentals",
      description:
        "The best way to choose is to let us know what you need and we will help you find the perfect villa for you!",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFaqs;
/* prettier-ignore-end */
