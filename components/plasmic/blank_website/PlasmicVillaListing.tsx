// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: DFSgDk7xEF4uDtL4KTuii
// Component: 4IYytJcVf3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantskpUco5Gf8Gxk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: KPUco5Gf8Gxk/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_blank_website.module.css"; // plasmic-import: DFSgDk7xEF4uDtL4KTuii/projectcss
import sty from "./PlasmicVillaListing.module.css"; // plasmic-import: 4IYytJcVf3/css

import IconBed2Icon from "./icons/PlasmicIcon__IconBed2"; // plasmic-import: cjbw8vk-G/icon
import IconUserFriendsIcon from "./icons/PlasmicIcon__IconUserFriends"; // plasmic-import: 9sEL3AEFEMB/icon
import IconShower2Icon from "./icons/PlasmicIcon__IconShower2"; // plasmic-import: zsEHQv3X5J/icon
import IconWiFiIcon from "./icons/PlasmicIcon__IconWiFi"; // plasmic-import: glh44mfmuWC/icon
import IconSwimmingPool2Icon from "./icons/PlasmicIcon__IconSwimmingPool2"; // plasmic-import: Tbp1NnMu3M/icon
import IconAlternateCarIcon from "./icons/PlasmicIcon__IconAlternateCar"; // plasmic-import: rXEPFX-eXi/icon

createPlasmicElementProxy;

export type PlasmicVillaListing__VariantMembers = {
  withPrice: "withPrice";
};
export type PlasmicVillaListing__VariantsArgs = {
  withPrice?: SingleBooleanChoiceArg<"withPrice">;
};
type VariantPropType = keyof PlasmicVillaListing__VariantsArgs;
export const PlasmicVillaListing__VariantProps = new Array<VariantPropType>(
  "withPrice"
);

export type PlasmicVillaListing__ArgsType = {
  villaDetails?: any;
  priceObj?: any;
  totalReviews?: number;
  reviewsAvg?: number;
};
type ArgPropType = keyof PlasmicVillaListing__ArgsType;
export const PlasmicVillaListing__ArgProps = new Array<ArgPropType>(
  "villaDetails",
  "priceObj",
  "totalReviews",
  "reviewsAvg"
);

export type PlasmicVillaListing__OverridesType = {
  root?: p.Flex<"div">;
  container?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  img?: p.Flex<typeof p.PlasmicImg>;
  right?: p.Flex<"div">;
  facilities?: p.Flex<"div">;
  description?: p.Flex<"section">;
  button?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultVillaListingProps {
  villaDetails?: any;
  priceObj?: any;
  totalReviews?: number;
  reviewsAvg?: number;
  withPrice?: SingleBooleanChoiceArg<"withPrice">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicVillaListing__RenderFunc(props: {
  variants: PlasmicVillaListing__VariantsArgs;
  args: PlasmicVillaListing__ArgsType;
  overrides: PlasmicVillaListing__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          villaDetails: {
            html_folder: "aquila-villa",
            villa_name: "Aquila Villa",
            main_image: "Aquila-Villa-1.jpg",
            location: "Crete, Chania, Drapanos village",
            bedrooms: 4,
            sleeps: 10,
            bathrooms: 5,
            pool_type: "private",
            car: "recommended",
            description:
              "A sea side villa with private pool, indescribable sea view, modern decoration and equipped with all the necessary amenities to offer you a luxury stay.",
            price_min: 2000
          }
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "withPrice",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withPrice
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantskpUco5Gf8Gxk()
  });

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root
        )}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"container"}
          data-plasmic-override={overrides.container}
          hasGap={true}
          className={classNames(projectcss.all, sty.container)}
        >
          {(
            hasVariant(globalVariants, "screen", "tabletOnly") ? true : true
          ) ? (
            <div className={classNames(projectcss.all, sty.freeBox__tgqh9)}>
              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___0B7th)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__ju2YG
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.villaDetails.villa_name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h3>
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__qxN2O
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.villaDetails.location;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h4>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <section
                  className={classNames(projectcss.all, sty.section__rZxNc)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ex7HZ
                    )}
                  >
                    {"5.0 from 29 reviews"}
                  </div>
                </section>
              ) : null}
            </div>
          ) : null}
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__q0Lgj)}
          >
            <p.PlasmicLink
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(projectcss.all, projectcss.a, sty.link)}
              component={Link}
              href={(() => {
                try {
                  return $props.villaDetails.html_folder;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
            >
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("410px" as const)
                    : ("248px" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("100%" as const)
                    : ("547px" as const)
                }
                loading={"lazy" as const}
                src={(() => {
                  try {
                    return (
                      "https://chania-rentals-static.s3.eu-west-2.amazonaws.com/villas/" +
                      $props.villaDetails.html_folder +
                      "/slides-full/" +
                      $props.villaDetails.main_image
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </p.PlasmicLink>
            <p.Stack
              as={"div"}
              data-plasmic-name={"right"}
              data-plasmic-override={overrides.right}
              hasGap={true}
              className={classNames(projectcss.all, sty.right)}
            >
              {(
                hasVariant(globalVariants, "screen", "tabletOnly") ? true : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___0Nsga)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fvJ)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__lpuvq
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $props.villaDetails.villa_name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </h3>
                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__eTwYr
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $props.villaDetails.location;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </h4>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return !!$props.totalReviews;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <section
                      className={classNames(projectcss.all, sty.section__irGaE)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0Hhza
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $props.reviewsAvg +
                                " from " +
                                $props.totalReviews +
                                " reviews"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "5.0 from 29 reviews";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </section>
                  ) : null}
                </div>
              ) : null}
              <div
                data-plasmic-name={"facilities"}
                data-plasmic-override={overrides.facilities}
                className={classNames(projectcss.all, sty.facilities)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__bKbdV)}>
                  <IconBed2Icon
                    className={classNames(projectcss.all, sty.svg__nxlAl)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bKbq0
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.villaDetails.bedrooms;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "4";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4CrUt
                    )}
                  >
                    {"bedrooms"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__pOp0P)}>
                  <IconUserFriendsIcon
                    className={classNames(projectcss.all, sty.svg__suAoU)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gYq5X
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.villaDetails.sleeps;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "4";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pzK5J
                    )}
                  >
                    {"sleeps"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__jlWvL)}>
                  <IconShower2Icon
                    className={classNames(projectcss.all, sty.svg__kTwJk)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mXeKc
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.villaDetails.bathrooms;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "4";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lkJxl
                    )}
                  >
                    {"bathrooms"}
                  </div>
                </div>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zq5B)}
                  >
                    <IconWiFiIcon
                      className={classNames(projectcss.all, sty.svg__eLKt)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cZyQ4
                      )}
                    >
                      {"free"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__idbW
                      )}
                    >
                      {"wifi"}
                    </div>
                  </div>
                ) : null}
                <div className={classNames(projectcss.all, sty.freeBox__vXig9)}>
                  <IconSwimmingPool2Icon
                    className={classNames(projectcss.all, sty.svg__tust8)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bXlDt
                    )}
                  >
                    {"private"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pgBsv
                    )}
                  >
                    {"pool"}
                  </div>
                </div>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : hasVariant(globalVariants, "screen", "tabletOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__urTwY)}
                  >
                    <IconAlternateCarIcon
                      className={classNames(projectcss.all, sty.svg__hZcfZ)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rIwEf
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $props.villaDetails.car;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "4";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1R2MF
                      )}
                    >
                      {"car"}
                    </div>
                  </div>
                ) : null}
              </div>
              <section
                data-plasmic-name={"description"}
                data-plasmic-override={overrides.description}
                className={classNames(projectcss.all, sty.description)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2D04A
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.villaDetails.description;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </section>
              <div className={classNames(projectcss.all, sty.freeBox__fkkmg)}>
                <p.Stack
                  as={"section"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.section__vD4Yz, {
                    [sty.sectionwithPrice__vD4Yzy1PG]: hasVariant(
                      $state,
                      "withPrice",
                      "withPrice"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__g70Rm,
                      {
                        [sty.textwithPrice__g70RmY1PG]: hasVariant(
                          $state,
                          "withPrice",
                          "withPrice"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "withPrice", "withPrice") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return `(${$props?.priceObj?.totalDays} nights)`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "from ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "from " +
                              $props.villaDetails.price_min +
                              "€ per week"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "from ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    )}
                  </div>
                  {(
                    hasVariant($state, "withPrice", "withPrice")
                      ? (() => {
                          try {
                            return !!$props.priceObj.discount;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : false
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hhEt,
                        {
                          [sty.textwithPrice__hhEtY1PG]: hasVariant(
                            $state,
                            "withPrice",
                            "withPrice"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "withPrice", "withPrice") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return `${$props?.priceObj?.showPrice}€`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "from ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                "from " +
                                $props.villaDetails.price_min +
                                "€ per week"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "from ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "withPrice", "withPrice") ? true : false
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mh6FC,
                        {
                          [sty.textwithPrice__mh6FCy1PG]: hasVariant(
                            $state,
                            "withPrice",
                            "withPrice"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "withPrice", "withPrice") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return `${$props?.priceObj?.finalPrice}€`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "from ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                "from " +
                                $props.villaDetails.price_min +
                                "€ per week"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "from ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                  ) : null}
                </p.Stack>
                <p.PlasmicLink
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.button,
                    {
                      [sty.buttonwithPrice]: hasVariant(
                        $state,
                        "withPrice",
                        "withPrice"
                      )
                    }
                  )}
                  component={Link}
                  href={
                    hasVariant(globalVariants, "screen", "tabletOnly")
                      ? (() => {
                          try {
                            return $props.villaDetails.html_folder;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return $props.villaDetails.html_folder;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                  }
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uY5Xm
                    )}
                  >
                    {"more info"}
                  </div>
                </p.PlasmicLink>
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "container",
    "link",
    "img",
    "right",
    "facilities",
    "description",
    "button"
  ],
  container: [
    "container",
    "link",
    "img",
    "right",
    "facilities",
    "description",
    "button"
  ],
  link: ["link", "img"],
  img: ["img"],
  right: ["right", "facilities", "description", "button"],
  facilities: ["facilities"],
  description: ["description"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  container: "div";
  link: "a";
  img: typeof p.PlasmicImg;
  right: "div";
  facilities: "div";
  description: "section";
  button: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVillaListing__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVillaListing__VariantsArgs;
    args?: PlasmicVillaListing__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicVillaListing__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicVillaListing__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicVillaListing__ArgProps,
          internalVariantPropNames: PlasmicVillaListing__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicVillaListing__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVillaListing";
  } else {
    func.displayName = `PlasmicVillaListing.${nodeName}`;
  }
  return func;
}

export const PlasmicVillaListing = Object.assign(
  // Top-level PlasmicVillaListing renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    container: makeNodeComponent("container"),
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    right: makeNodeComponent("right"),
    facilities: makeNodeComponent("facilities"),
    description: makeNodeComponent("description"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicVillaListing
    internalVariantProps: PlasmicVillaListing__VariantProps,
    internalArgProps: PlasmicVillaListing__ArgProps
  }
);

export default PlasmicVillaListing;
/* prettier-ignore-end */
