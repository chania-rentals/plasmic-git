// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: DFSgDk7xEF4uDtL4KTuii
// Component: 6Hg4UVKwGM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { HomeCarousel } from "@/components/HomeCarousel"; // plasmic-import: qqFdwPcNt8/codeComponent
import RecommendedVillas from "../../RecommendedVillas"; // plasmic-import: HBIlN8IHFlq/component
import { ReviewsCarousel } from "@/components/ReviewsCarousel"; // plasmic-import: 6CXQJNVPL2/codeComponent
import ExtraServices from "../../ExtraServices"; // plasmic-import: nSt5TCeTKDE/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_blank_website.module.css"; // plasmic-import: DFSgDk7xEF4uDtL4KTuii/projectcss
import sty from "./PlasmicIndex.module.css"; // plasmic-import: 6Hg4UVKwGM/css

createPlasmicElementProxy;

export type PlasmicIndex__VariantMembers = {};
export type PlasmicIndex__VariantsArgs = {};
type VariantPropType = keyof PlasmicIndex__VariantsArgs;
export const PlasmicIndex__VariantProps = new Array<VariantPropType>();

export type PlasmicIndex__ArgsType = {};
type ArgPropType = keyof PlasmicIndex__ArgsType;
export const PlasmicIndex__ArgProps = new Array<ArgPropType>();

export type PlasmicIndex__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  homeCarousel?: p.Flex<typeof HomeCarousel>;
  recommendedVillas?: p.Flex<typeof RecommendedVillas>;
  reviewsCarousel?: p.Flex<typeof ReviewsCarousel>;
  h1?: p.Flex<"h1">;
  extraServices?: p.Flex<typeof ExtraServices>;
};

export interface DefaultIndexProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicIndex__RenderFunc(props: {
  variants: PlasmicIndex__VariantsArgs;
  args: PlasmicIndex__ArgsType;
  overrides: PlasmicIndex__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicIndex.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicIndex.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicIndex.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicIndex.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicIndex.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicIndex.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <HomeCarousel
                data-plasmic-name={"homeCarousel"}
                data-plasmic-override={overrides.homeCarousel}
                className={classNames("__wab_instance", sty.homeCarousel)}
              />

              <RecommendedVillas
                data-plasmic-name={"recommendedVillas"}
                data-plasmic-override={overrides.recommendedVillas}
                className={classNames("__wab_instance", sty.recommendedVillas)}
              />

              <ReviewsCarousel
                data-plasmic-name={"reviewsCarousel"}
                data-plasmic-override={overrides.reviewsCarousel}
                className={classNames("__wab_instance", sty.reviewsCarousel)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {"Customer reviews"}
                </h1>
              </ReviewsCarousel>
              <ExtraServices
                data-plasmic-name={"extraServices"}
                data-plasmic-override={overrides.extraServices}
                className={classNames("__wab_instance", sty.extraServices)}
              />
            </p.Stack>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "homeCarousel",
    "recommendedVillas",
    "reviewsCarousel",
    "h1",
    "extraServices"
  ],
  freeBox: [
    "freeBox",
    "homeCarousel",
    "recommendedVillas",
    "reviewsCarousel",
    "h1",
    "extraServices"
  ],
  homeCarousel: ["homeCarousel"],
  recommendedVillas: ["recommendedVillas"],
  reviewsCarousel: ["reviewsCarousel", "h1"],
  h1: ["h1"],
  extraServices: ["extraServices"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  homeCarousel: typeof HomeCarousel;
  recommendedVillas: typeof RecommendedVillas;
  reviewsCarousel: typeof ReviewsCarousel;
  h1: "h1";
  extraServices: typeof ExtraServices;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIndex__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicIndex__VariantsArgs;
    args?: PlasmicIndex__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicIndex__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicIndex__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicIndex__ArgProps,
          internalVariantPropNames: PlasmicIndex__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicIndex__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIndex";
  } else {
    func.displayName = `PlasmicIndex.${nodeName}`;
  }
  return func;
}

export const PlasmicIndex = Object.assign(
  // Top-level PlasmicIndex renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    homeCarousel: makeNodeComponent("homeCarousel"),
    recommendedVillas: makeNodeComponent("recommendedVillas"),
    reviewsCarousel: makeNodeComponent("reviewsCarousel"),
    h1: makeNodeComponent("h1"),
    extraServices: makeNodeComponent("extraServices"),

    // Metadata about props expected for PlasmicIndex
    internalVariantProps: PlasmicIndex__VariantProps,
    internalArgProps: PlasmicIndex__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Home Page | Holiday villas in Chania, Crete. Book online!",
      description:
        "We hand-select every villa, scrutinising each one to ensure we are offering the best quality accommodation at an affordable price. We also make it our business to know the owners of each individual villa that is listed on our web site.",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicIndex;
/* prettier-ignore-end */
