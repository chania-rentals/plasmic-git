// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w4yYo48qoeavp6MLu5USrX
// Component: vwSSb6HVzl

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: 54VuA_p7PRlRSj/codeComponent

import { useScreenVariants as useScreenVariants_793QbDbnmqZpDb } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 793qbDbnmqZPDb/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_visitors.module.css"; // plasmic-import: w4yYo48qoeavp6MLu5USrX/projectcss
import sty from "./PlasmicVillaListing.module.css"; // plasmic-import: vwSSb6HVzl/css

import IconBed2Icon from "./icons/PlasmicIcon__IconBed2"; // plasmic-import: Nm0JLxPHf/icon
import IconUserFriends2Icon from "./icons/PlasmicIcon__IconUserFriends2"; // plasmic-import: RUbUIIKr-7/icon
import IconShower2Icon from "./icons/PlasmicIcon__IconShower2"; // plasmic-import: krOlpVj1xW/icon
import IconWiFi2Icon from "./icons/PlasmicIcon__IconWiFi2"; // plasmic-import: w-NyHY6hyf/icon
import IconSwimmingPool2Icon from "./icons/PlasmicIcon__IconSwimmingPool2"; // plasmic-import: FBo7qokeMH/icon
import IconAlternateCarIcon from "./icons/PlasmicIcon__IconAlternateCar"; // plasmic-import: evxzZ8huz8/icon

export type PlasmicVillaListing__VariantMembers = {
  withPrice: "withPrice";
};
export type PlasmicVillaListing__VariantsArgs = {
  withPrice?: SingleBooleanChoiceArg<"withPrice">;
};
type VariantPropType = keyof PlasmicVillaListing__VariantsArgs;
export const PlasmicVillaListing__VariantProps = new Array<VariantPropType>(
  "withPrice"
);

export type PlasmicVillaListing__ArgsType = {
  villaDetails?: any;
  priceObj?: any;
};
type ArgPropType = keyof PlasmicVillaListing__ArgsType;
export const PlasmicVillaListing__ArgProps = new Array<ArgPropType>(
  "villaDetails",
  "priceObj"
);

export type PlasmicVillaListing__OverridesType = {
  root?: p.Flex<"div">;
  frame20?: p.Flex<"div">;
  frame21?: p.Flex<"div">;
  frame22?: p.Flex<"div">;
  horizontalStack?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  img?: p.Flex<typeof p.PlasmicImg>;
  right?: p.Flex<"div">;
  frame19?: p.Flex<"div">;
  frame17?: p.Flex<"div">;
  frame18?: p.Flex<"div">;
  facilities?: p.Flex<"div">;
  frame1?: p.Flex<"div">;
  frame2?: p.Flex<"div">;
  frame3?: p.Flex<"div">;
  frame4?: p.Flex<"div">;
  frame5?: p.Flex<"div">;
  frame6?: p.Flex<"div">;
  frame32?: p.Flex<"div">;
  priceStack?: p.Flex<"div">;
  moreInfo?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultVillaListingProps {
  villaDetails?: any;
  priceObj?: any;
  withPrice?: SingleBooleanChoiceArg<"withPrice">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicVillaListing__RenderFunc(props: {
  variants: PlasmicVillaListing__VariantsArgs;
  args: PlasmicVillaListing__ArgsType;
  overrides: PlasmicVillaListing__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          villaDetails: {}
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "withPrice",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withPrice
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_793QbDbnmqZpDb()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {(hasVariant(globalVariants, "screen", "tabletOnly") ? true : false) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"frame20"}
          data-plasmic-override={overrides.frame20}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame20)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame21"}
            data-plasmic-override={overrides.frame21}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame21)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nLAqy
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.villaDetails.villa_name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Villa del Mare";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4OIf
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.villaDetails.location;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Crete, Chania, Stavros";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </p.Stack>
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame22"}
            data-plasmic-override={overrides.frame22}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame22)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aYq1P
                )}
              >
                {"5.0 from 29 reviews"}
              </div>
            ) : null}
          </p.Stack>
        </p.Stack>
      ) : null}
      <p.Stack
        as={"div"}
        data-plasmic-name={"horizontalStack"}
        data-plasmic-override={overrides.horizontalStack}
        hasGap={true}
        className={classNames(projectcss.all, sty.horizontalStack)}
      >
        <p.PlasmicLink
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          component={Link}
          href={(() => {
            try {
              return (
                "https://chania-rentals.com/chania-villas/" +
                $props.villaDetails.html_folder
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          platform={"nextjs"}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ("277px" as const)
                : hasVariant(globalVariants, "screen", "tabletOnly")
                ? ("213px" as const)
                : ("271px" as const)
            }
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ("100%" as const)
                : hasVariant(globalVariants, "screen", "tabletOnly")
                ? ("100%" as const)
                : ("374px" as const)
            }
            loading={"lazy" as const}
            src={(() => {
              try {
                return (
                  "https://chania-rentals-static.s3.eu-west-2.amazonaws.com/villas/" +
                  $props.villaDetails.html_folder +
                  "/slides-full/" +
                  $props.villaDetails.main_image
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        </p.PlasmicLink>
        <p.Stack
          as={"div"}
          data-plasmic-name={"right"}
          data-plasmic-override={overrides.right}
          hasGap={true}
          className={classNames(projectcss.all, sty.right)}
        >
          {(
            hasVariant(globalVariants, "screen", "tabletOnly") ? true : true
          ) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame19"}
              data-plasmic-override={overrides.frame19}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame19)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame17"}
                data-plasmic-override={overrides.frame17}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame17)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qB3Ga
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.villaDetails.villa_name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Villa del Mare";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__u5XVy
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.villaDetails.location;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Crete, Chania, Stavros";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </p.Stack>
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame18"}
                data-plasmic-override={overrides.frame18}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame18)}
              >
                {true ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gGoVo
                    )}
                  >
                    {"5.0 from 29 reviews"}
                  </div>
                ) : null}
              </p.Stack>
            </p.Stack>
          ) : null}
          <div
            data-plasmic-name={"facilities"}
            data-plasmic-override={overrides.facilities}
            className={classNames(projectcss.all, sty.facilities)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame1"}
              data-plasmic-override={overrides.frame1}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame1)}
            >
              <IconBed2Icon
                className={classNames(projectcss.all, sty.svg__lEFuJ)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ade2J
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.villaDetails.bedrooms;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "5";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1Aus3
                )}
              >
                {"bedrooms"}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame2"}
              data-plasmic-override={overrides.frame2}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame2)}
            >
              <IconUserFriends2Icon
                className={classNames(projectcss.all, sty.svg__uL1Nu)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__osiAx
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.villaDetails.sleeps;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "10";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tDf7J
                )}
              >
                {"sleeps"}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame3"}
              data-plasmic-override={overrides.frame3}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame3)}
            >
              <IconShower2Icon
                className={classNames(projectcss.all, sty.svg__zsfZw)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yfFie
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.villaDetails.bathrooms;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "3";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rdwgZ
                )}
              >
                {"Bathrooms"}
              </div>
            </p.Stack>
            {(
              hasVariant(globalVariants, "screen", "tabletOnly") ? true : true
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame4"}
                data-plasmic-override={overrides.frame4}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame4)}
              >
                <IconWiFi2Icon
                  className={classNames(projectcss.all, sty.svg__vwzsA)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cwT2L
                  )}
                >
                  {"free"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___04Q9N
                  )}
                >
                  {"wifi"}
                </div>
              </p.Stack>
            ) : null}
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame5"}
              data-plasmic-override={overrides.frame5}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame5)}
            >
              <IconSwimmingPool2Icon
                className={classNames(projectcss.all, sty.svg__yPe)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fbxcZ
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.villaDetails.pool_type;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "private";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ufYTd
                )}
              >
                {"pool"}
              </div>
            </p.Stack>
            {(
              hasVariant(globalVariants, "screen", "tabletOnly") ? true : true
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame6"}
                data-plasmic-override={overrides.frame6}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame6)}
              >
                <IconAlternateCarIcon
                  className={classNames(projectcss.all, sty.svg___16N)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ddL6E
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.villaDetails.car;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "essential";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cRl9W
                  )}
                >
                  {"car"}
                </div>
              </p.Stack>
            ) : null}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__kA3Ps
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.villaDetails.description;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "A modern villa with pool, sauna and gym, built on a 50000sq.m coastal private property with breathtaking view and private access to the sea.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame32"}
            data-plasmic-override={overrides.frame32}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame32, {
              [sty.frame32withPrice]: hasVariant(
                $state,
                "withPrice",
                "withPrice"
              )
            })}
          >
            {(hasVariant($state, "withPrice", "withPrice") ? true : true) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"priceStack"}
                data-plasmic-override={overrides.priceStack}
                hasGap={true}
                className={classNames(projectcss.all, sty.priceStack, {
                  [sty.priceStackwithPrice]: hasVariant(
                    $state,
                    "withPrice",
                    "withPrice"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3RKw,
                    {
                      [sty.textwithPrice___3RKWkUwBn]: hasVariant(
                        $state,
                        "withPrice",
                        "withPrice"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "withPrice", "withPrice") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return `(${$props.priceObj.totalDays} nights)`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "from 1900€ per week";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            !$props.withPrice &&
                            "from " +
                              $props.villaDetails.price_min +
                              " per week"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "from 1900€ per week";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  )}
                </div>
                {(
                  hasVariant($state, "withPrice", "withPrice")
                    ? (() => {
                        try {
                          return !!$props.priceObj.discount;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : true
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cepNy,
                      {
                        [sty.textwithPrice__cepNykUwBn]: hasVariant(
                          $state,
                          "withPrice",
                          "withPrice"
                        )
                      }
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.priceObj.showPrice + "€";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                ) : null}
                {(
                  hasVariant($state, "withPrice", "withPrice") ? true : false
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__um5By,
                      {
                        [sty.textwithPrice__um5BykUwBn]: hasVariant(
                          $state,
                          "withPrice",
                          "withPrice"
                        )
                      }
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.priceObj.finalPrice + "€";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                ) : null}
              </p.Stack>
            ) : null}
            <p.PlasmicLink
              data-plasmic-name={"moreInfo"}
              data-plasmic-override={overrides.moreInfo}
              className={classNames(projectcss.all, projectcss.a, sty.moreInfo)}
              component={Link}
              href={(() => {
                try {
                  return (
                    "https://chania-rentals.com/chania-villas/" +
                    $props.villaDetails.html_folder
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vS6Ng
                )}
              >
                {"more info"}
              </div>
            </p.PlasmicLink>
          </p.Stack>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "frame20",
    "frame21",
    "frame22",
    "horizontalStack",
    "link",
    "img",
    "right",
    "frame19",
    "frame17",
    "frame18",
    "facilities",
    "frame1",
    "frame2",
    "frame3",
    "frame4",
    "frame5",
    "frame6",
    "frame32",
    "priceStack",
    "moreInfo"
  ],
  frame20: ["frame20", "frame21", "frame22"],
  frame21: ["frame21"],
  frame22: ["frame22"],
  horizontalStack: [
    "horizontalStack",
    "link",
    "img",
    "right",
    "frame19",
    "frame17",
    "frame18",
    "facilities",
    "frame1",
    "frame2",
    "frame3",
    "frame4",
    "frame5",
    "frame6",
    "frame32",
    "priceStack",
    "moreInfo"
  ],
  link: ["link", "img"],
  img: ["img"],
  right: [
    "right",
    "frame19",
    "frame17",
    "frame18",
    "facilities",
    "frame1",
    "frame2",
    "frame3",
    "frame4",
    "frame5",
    "frame6",
    "frame32",
    "priceStack",
    "moreInfo"
  ],
  frame19: ["frame19", "frame17", "frame18"],
  frame17: ["frame17"],
  frame18: ["frame18"],
  facilities: [
    "facilities",
    "frame1",
    "frame2",
    "frame3",
    "frame4",
    "frame5",
    "frame6"
  ],
  frame1: ["frame1"],
  frame2: ["frame2"],
  frame3: ["frame3"],
  frame4: ["frame4"],
  frame5: ["frame5"],
  frame6: ["frame6"],
  frame32: ["frame32", "priceStack", "moreInfo"],
  priceStack: ["priceStack"],
  moreInfo: ["moreInfo"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  frame20: "div";
  frame21: "div";
  frame22: "div";
  horizontalStack: "div";
  link: "a";
  img: typeof p.PlasmicImg;
  right: "div";
  frame19: "div";
  frame17: "div";
  frame18: "div";
  facilities: "div";
  frame1: "div";
  frame2: "div";
  frame3: "div";
  frame4: "div";
  frame5: "div";
  frame6: "div";
  frame32: "div";
  priceStack: "div";
  moreInfo: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVillaListing__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVillaListing__VariantsArgs;
    args?: PlasmicVillaListing__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicVillaListing__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicVillaListing__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicVillaListing__ArgProps,
          internalVariantPropNames: PlasmicVillaListing__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicVillaListing__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVillaListing";
  } else {
    func.displayName = `PlasmicVillaListing.${nodeName}`;
  }
  return func;
}

export const PlasmicVillaListing = Object.assign(
  // Top-level PlasmicVillaListing renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame20: makeNodeComponent("frame20"),
    frame21: makeNodeComponent("frame21"),
    frame22: makeNodeComponent("frame22"),
    horizontalStack: makeNodeComponent("horizontalStack"),
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    right: makeNodeComponent("right"),
    frame19: makeNodeComponent("frame19"),
    frame17: makeNodeComponent("frame17"),
    frame18: makeNodeComponent("frame18"),
    facilities: makeNodeComponent("facilities"),
    frame1: makeNodeComponent("frame1"),
    frame2: makeNodeComponent("frame2"),
    frame3: makeNodeComponent("frame3"),
    frame4: makeNodeComponent("frame4"),
    frame5: makeNodeComponent("frame5"),
    frame6: makeNodeComponent("frame6"),
    frame32: makeNodeComponent("frame32"),
    priceStack: makeNodeComponent("priceStack"),
    moreInfo: makeNodeComponent("moreInfo"),

    // Metadata about props expected for PlasmicVillaListing
    internalVariantProps: PlasmicVillaListing__VariantProps,
    internalArgProps: PlasmicVillaListing__ArgProps
  }
);

export default PlasmicVillaListing;
/* prettier-ignore-end */
