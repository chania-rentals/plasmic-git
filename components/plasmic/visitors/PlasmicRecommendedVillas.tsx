// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w4yYo48qoeavp6MLu5USrX
// Component: ARLYiymc0z

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariants_793QbDbnmqZpDb } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 793qbDbnmqZPDb/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_visitors.module.css"; // plasmic-import: w4yYo48qoeavp6MLu5USrX/projectcss
import sty from "./PlasmicRecommendedVillas.module.css"; // plasmic-import: ARLYiymc0z/css

import IconBedIcon from "./icons/PlasmicIcon__IconBed"; // plasmic-import: EJGVF0fbYm/icon
import IconUserFriendsIcon from "./icons/PlasmicIcon__IconUserFriends"; // plasmic-import: caRC1ivz9t/icon
import IconShowerIcon from "./icons/PlasmicIcon__IconShower"; // plasmic-import: NyU6wO6Svu/icon
import IconWiFiIcon from "./icons/PlasmicIcon__IconWiFi"; // plasmic-import: LIGOAN9qik/icon
import IconSwimmingPoolIcon from "./icons/PlasmicIcon__IconSwimmingPool"; // plasmic-import: iHNoxRcorC/icon

export type PlasmicRecommendedVillas__VariantMembers = {};
export type PlasmicRecommendedVillas__VariantsArgs = {};
type VariantPropType = keyof PlasmicRecommendedVillas__VariantsArgs;
export const PlasmicRecommendedVillas__VariantProps =
  new Array<VariantPropType>();

export type PlasmicRecommendedVillas__ArgsType = {};
type ArgPropType = keyof PlasmicRecommendedVillas__ArgsType;
export const PlasmicRecommendedVillas__ArgProps = new Array<ArgPropType>();

export type PlasmicRecommendedVillas__OverridesType = {
  root?: p.Flex<"div">;
  frame15?: p.Flex<"div">;
  frame14?: p.Flex<"div">;
  frame11?: p.Flex<"div">;
  httpsChaniaRentalsStatics3EuWest2Amazonaws1?: p.Flex<"div">;
  frame12?: p.Flex<"div">;
  frame9?: p.Flex<"div">;
  frame3?: p.Flex<"div">;
  frame4?: p.Flex<"div">;
  frame5?: p.Flex<"div">;
  frame6?: p.Flex<"div">;
  frame7?: p.Flex<"div">;
  frame8?: p.Flex<"div">;
  frame10?: p.Flex<"a"> & Partial<LinkProps>;
  frame13?: p.Flex<"div">;
  frame16?: p.Flex<"div">;
  frame27?: p.Flex<"div">;
  frame28?: p.Flex<"div">;
  frame29?: p.Flex<"div">;
  frame30?: p.Flex<"div">;
  frame31?: p.Flex<"div">;
  frame32?: p.Flex<"div">;
  frame33?: p.Flex<"div">;
  frame24?: p.Flex<"a"> & Partial<LinkProps>;
  frame25?: p.Flex<"div">;
  httpsChaniaRentalsStatics3EuWest2Amazonaws3?: p.Flex<"div">;
  frame26?: p.Flex<"div">;
  frame17?: p.Flex<"div">;
  frame18?: p.Flex<"div">;
  frame19?: p.Flex<"div">;
  frame20?: p.Flex<"div">;
  frame21?: p.Flex<"div">;
  frame22?: p.Flex<"div">;
  frame23?: p.Flex<"div">;
  frame34?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultRecommendedVillasProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRecommendedVillas__RenderFunc(props: {
  variants: PlasmicRecommendedVillas__VariantsArgs;
  args: PlasmicRecommendedVillas__ArgsType;
  overrides: PlasmicRecommendedVillas__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_793QbDbnmqZpDb()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"frame15"}
        data-plasmic-override={overrides.frame15}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame15)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ifEzh
          )}
        >
          {"Recommended Villas"}
        </div>
        <p.Stack
          as={"div"}
          data-plasmic-name={"frame14"}
          data-plasmic-override={overrides.frame14}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame14)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame11"}
            data-plasmic-override={overrides.frame11}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame11)}
          >
            <div
              data-plasmic-name={"httpsChaniaRentalsStatics3EuWest2Amazonaws1"}
              data-plasmic-override={
                overrides.httpsChaniaRentalsStatics3EuWest2Amazonaws1
              }
              className={classNames(
                projectcss.all,
                sty.httpsChaniaRentalsStatics3EuWest2Amazonaws1
              )}
            />

            <div
              data-plasmic-name={"frame12"}
              data-plasmic-override={overrides.frame12}
              className={classNames(projectcss.all, sty.frame12)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__otewz
                )}
              >
                {"Dionysus villa"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hUuO
                )}
              >
                {"Kalyves Village"}
              </div>
            </div>
            <div
              data-plasmic-name={"frame9"}
              data-plasmic-override={overrides.frame9}
              className={classNames(projectcss.all, sty.frame9)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame3"}
                data-plasmic-override={overrides.frame3}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame3)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame4"}
                  data-plasmic-override={overrides.frame4}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame4)}
                >
                  <IconBedIcon
                    className={classNames(projectcss.all, sty.svg__yezmh)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gb3Y
                    )}
                  >
                    {"2"}
                  </div>
                </p.Stack>
              </p.Stack>
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame5"}
                data-plasmic-override={overrides.frame5}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame5)}
              >
                <IconUserFriendsIcon
                  className={classNames(projectcss.all, sty.svg__yL1Zz)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nx9Bs
                  )}
                >
                  {"4"}
                </div>
              </p.Stack>
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame6"}
                data-plasmic-override={overrides.frame6}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame6)}
              >
                <IconShowerIcon
                  className={classNames(projectcss.all, sty.svg__hqZ21)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xGvz9
                  )}
                >
                  {"2"}
                </div>
              </p.Stack>
              {(
                hasVariant(globalVariants, "screen", "tabletOnly") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame7"}
                  data-plasmic-override={overrides.frame7}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame7)}
                >
                  <IconWiFiIcon
                    className={classNames(projectcss.all, sty.svg__vEi5Y)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hSNs4
                    )}
                  >
                    {"free"}
                  </div>
                </p.Stack>
              ) : null}
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame8"}
                data-plasmic-override={overrides.frame8}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame8)}
              >
                <IconSwimmingPoolIcon
                  className={classNames(projectcss.all, sty.svg__e6CTz)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9SLx
                  )}
                >
                  {"privare"}
                </div>
              </p.Stack>
            </div>
            {(
              hasVariant(globalVariants, "screen", "tabletOnly") ? true : true
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__e0L8)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fOubA
                  )}
                >
                  {
                    "A stone villa located at the entrance of Souda Bay, just 250m away from the sandy beach and less than 1km away from Kalyves village."
                  }
                </div>
              </div>
            ) : null}
            <p.Stack
              as={p.PlasmicLink}
              data-plasmic-name={"frame10"}
              data-plasmic-override={overrides.frame10}
              hasGap={true}
              className={classNames(projectcss.all, projectcss.a, sty.frame10)}
              component={Link}
              href={
                "https://chania-rentals.com/chania-villas/dionysusvilla" as const
              }
              platform={"nextjs"}
            >
              {true ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rI1S
                  )}
                >
                  {"more info"}
                </div>
              ) : null}
            </p.Stack>
          </p.Stack>
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame13"}
            data-plasmic-override={overrides.frame13}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame13)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ehXmK)} />

            <div
              data-plasmic-name={"frame16"}
              data-plasmic-override={overrides.frame16}
              className={classNames(projectcss.all, sty.frame16)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ttVbl
                )}
              >
                {"Aquila Villa"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__v30A6
                )}
              >
                {"Drapanos Village"}
              </div>
            </div>
            <div
              data-plasmic-name={"frame27"}
              data-plasmic-override={overrides.frame27}
              className={classNames(projectcss.all, sty.frame27)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame28"}
                data-plasmic-override={overrides.frame28}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame28)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame29"}
                  data-plasmic-override={overrides.frame29}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame29)}
                >
                  <IconBedIcon
                    className={classNames(projectcss.all, sty.svg__yltaZ)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yrX7S
                    )}
                  >
                    {"5"}
                  </div>
                </p.Stack>
              </p.Stack>
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame30"}
                data-plasmic-override={overrides.frame30}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame30)}
              >
                <IconUserFriendsIcon
                  className={classNames(projectcss.all, sty.svg__rlmrf)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dlauQ
                  )}
                >
                  {"10"}
                </div>
              </p.Stack>
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame31"}
                data-plasmic-override={overrides.frame31}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame31)}
              >
                <IconShowerIcon
                  className={classNames(projectcss.all, sty.svg__dLmDs)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pSwWq
                  )}
                >
                  {"5"}
                </div>
              </p.Stack>
              {(
                hasVariant(globalVariants, "screen", "tabletOnly") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame32"}
                  data-plasmic-override={overrides.frame32}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame32)}
                >
                  <IconWiFiIcon
                    className={classNames(projectcss.all, sty.svg__nyDp2)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4Qp1T
                    )}
                  >
                    {"free"}
                  </div>
                </p.Stack>
              ) : null}
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame33"}
                data-plasmic-override={overrides.frame33}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame33)}
              >
                <IconSwimmingPoolIcon
                  className={classNames(projectcss.all, sty.svg___6O9D6)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__f1WYj
                  )}
                >
                  {"privare"}
                </div>
              </p.Stack>
            </div>
            {(
              hasVariant(globalVariants, "screen", "tabletOnly") ? true : true
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__fgpxB)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8VlY
                  )}
                >
                  {
                    "A lovely light and airy villa for 10, with large private pool and garden, located in the beautiful traditional Gavalochori Village."
                  }
                </div>
              </div>
            ) : null}
            <p.Stack
              as={p.PlasmicLink}
              data-plasmic-name={"frame24"}
              data-plasmic-override={overrides.frame24}
              hasGap={true}
              className={classNames(projectcss.all, projectcss.a, sty.frame24)}
              component={Link}
              href={
                "https://chania-rentals.com/chania-villas/aquila-villa" as const
              }
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oKd5G
                )}
              >
                {"more info"}
              </div>
            </p.Stack>
          </p.Stack>
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame25"}
            data-plasmic-override={overrides.frame25}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame25)}
          >
            <div
              data-plasmic-name={"httpsChaniaRentalsStatics3EuWest2Amazonaws3"}
              data-plasmic-override={
                overrides.httpsChaniaRentalsStatics3EuWest2Amazonaws3
              }
              className={classNames(
                projectcss.all,
                sty.httpsChaniaRentalsStatics3EuWest2Amazonaws3
              )}
            />

            <div
              data-plasmic-name={"frame26"}
              data-plasmic-override={overrides.frame26}
              className={classNames(projectcss.all, sty.frame26)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wDbic
                )}
              >
                {"Keronia Villa"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uSbWj
                )}
              >
                {"Gavalochori Village"}
              </div>
            </div>
            <div
              data-plasmic-name={"frame17"}
              data-plasmic-override={overrides.frame17}
              className={classNames(projectcss.all, sty.frame17)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame18"}
                data-plasmic-override={overrides.frame18}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame18)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame19"}
                  data-plasmic-override={overrides.frame19}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame19)}
                >
                  <IconBedIcon
                    className={classNames(projectcss.all, sty.svg___6AqSf)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kijLy
                    )}
                  >
                    {"5"}
                  </div>
                </p.Stack>
              </p.Stack>
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame20"}
                data-plasmic-override={overrides.frame20}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame20)}
              >
                <IconUserFriendsIcon
                  className={classNames(projectcss.all, sty.svg__kCdrL)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__apJ9D
                  )}
                >
                  {"10"}
                </div>
              </p.Stack>
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame21"}
                data-plasmic-override={overrides.frame21}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame21)}
              >
                <IconShowerIcon
                  className={classNames(projectcss.all, sty.svg__tBqdb)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pkCYp
                  )}
                >
                  {"4"}
                </div>
              </p.Stack>
              {(
                hasVariant(globalVariants, "screen", "tabletOnly") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame22"}
                  data-plasmic-override={overrides.frame22}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame22)}
                >
                  <IconWiFiIcon
                    className={classNames(projectcss.all, sty.svg__slf4Z)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mohvh
                    )}
                  >
                    {"free"}
                  </div>
                </p.Stack>
              ) : null}
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame23"}
                data-plasmic-override={overrides.frame23}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame23)}
              >
                <IconSwimmingPoolIcon
                  className={classNames(projectcss.all, sty.svg__bGNlY)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___31Min
                  )}
                >
                  {"privare"}
                </div>
              </p.Stack>
            </div>
            {(
              hasVariant(globalVariants, "screen", "tabletOnly") ? true : true
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox___8YfNy)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aSoHr
                  )}
                >
                  {
                    "A stone villa located at the entrance of Souda Bay, just 250m away from the sandy beach and less than 1km away from Kalyves village."
                  }
                </div>
              </div>
            ) : null}
            <p.Stack
              as={p.PlasmicLink}
              data-plasmic-name={"frame34"}
              data-plasmic-override={overrides.frame34}
              hasGap={true}
              className={classNames(projectcss.all, projectcss.a, sty.frame34)}
              component={Link}
              href={
                "https://chania-rentals.com/chania-villas/keroniavilla" as const
              }
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sirfg
                )}
              >
                {"more info"}
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "frame15",
    "frame14",
    "frame11",
    "httpsChaniaRentalsStatics3EuWest2Amazonaws1",
    "frame12",
    "frame9",
    "frame3",
    "frame4",
    "frame5",
    "frame6",
    "frame7",
    "frame8",
    "frame10",
    "frame13",
    "frame16",
    "frame27",
    "frame28",
    "frame29",
    "frame30",
    "frame31",
    "frame32",
    "frame33",
    "frame24",
    "frame25",
    "httpsChaniaRentalsStatics3EuWest2Amazonaws3",
    "frame26",
    "frame17",
    "frame18",
    "frame19",
    "frame20",
    "frame21",
    "frame22",
    "frame23",
    "frame34"
  ],
  frame15: [
    "frame15",
    "frame14",
    "frame11",
    "httpsChaniaRentalsStatics3EuWest2Amazonaws1",
    "frame12",
    "frame9",
    "frame3",
    "frame4",
    "frame5",
    "frame6",
    "frame7",
    "frame8",
    "frame10",
    "frame13",
    "frame16",
    "frame27",
    "frame28",
    "frame29",
    "frame30",
    "frame31",
    "frame32",
    "frame33",
    "frame24",
    "frame25",
    "httpsChaniaRentalsStatics3EuWest2Amazonaws3",
    "frame26",
    "frame17",
    "frame18",
    "frame19",
    "frame20",
    "frame21",
    "frame22",
    "frame23",
    "frame34"
  ],
  frame14: [
    "frame14",
    "frame11",
    "httpsChaniaRentalsStatics3EuWest2Amazonaws1",
    "frame12",
    "frame9",
    "frame3",
    "frame4",
    "frame5",
    "frame6",
    "frame7",
    "frame8",
    "frame10",
    "frame13",
    "frame16",
    "frame27",
    "frame28",
    "frame29",
    "frame30",
    "frame31",
    "frame32",
    "frame33",
    "frame24",
    "frame25",
    "httpsChaniaRentalsStatics3EuWest2Amazonaws3",
    "frame26",
    "frame17",
    "frame18",
    "frame19",
    "frame20",
    "frame21",
    "frame22",
    "frame23",
    "frame34"
  ],
  frame11: [
    "frame11",
    "httpsChaniaRentalsStatics3EuWest2Amazonaws1",
    "frame12",
    "frame9",
    "frame3",
    "frame4",
    "frame5",
    "frame6",
    "frame7",
    "frame8",
    "frame10"
  ],
  httpsChaniaRentalsStatics3EuWest2Amazonaws1: [
    "httpsChaniaRentalsStatics3EuWest2Amazonaws1"
  ],
  frame12: ["frame12"],
  frame9: [
    "frame9",
    "frame3",
    "frame4",
    "frame5",
    "frame6",
    "frame7",
    "frame8"
  ],
  frame3: ["frame3", "frame4"],
  frame4: ["frame4"],
  frame5: ["frame5"],
  frame6: ["frame6"],
  frame7: ["frame7"],
  frame8: ["frame8"],
  frame10: ["frame10"],
  frame13: [
    "frame13",
    "frame16",
    "frame27",
    "frame28",
    "frame29",
    "frame30",
    "frame31",
    "frame32",
    "frame33",
    "frame24"
  ],
  frame16: ["frame16"],
  frame27: [
    "frame27",
    "frame28",
    "frame29",
    "frame30",
    "frame31",
    "frame32",
    "frame33"
  ],
  frame28: ["frame28", "frame29"],
  frame29: ["frame29"],
  frame30: ["frame30"],
  frame31: ["frame31"],
  frame32: ["frame32"],
  frame33: ["frame33"],
  frame24: ["frame24"],
  frame25: [
    "frame25",
    "httpsChaniaRentalsStatics3EuWest2Amazonaws3",
    "frame26",
    "frame17",
    "frame18",
    "frame19",
    "frame20",
    "frame21",
    "frame22",
    "frame23",
    "frame34"
  ],
  httpsChaniaRentalsStatics3EuWest2Amazonaws3: [
    "httpsChaniaRentalsStatics3EuWest2Amazonaws3"
  ],
  frame26: ["frame26"],
  frame17: [
    "frame17",
    "frame18",
    "frame19",
    "frame20",
    "frame21",
    "frame22",
    "frame23"
  ],
  frame18: ["frame18", "frame19"],
  frame19: ["frame19"],
  frame20: ["frame20"],
  frame21: ["frame21"],
  frame22: ["frame22"],
  frame23: ["frame23"],
  frame34: ["frame34"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  frame15: "div";
  frame14: "div";
  frame11: "div";
  httpsChaniaRentalsStatics3EuWest2Amazonaws1: "div";
  frame12: "div";
  frame9: "div";
  frame3: "div";
  frame4: "div";
  frame5: "div";
  frame6: "div";
  frame7: "div";
  frame8: "div";
  frame10: "a";
  frame13: "div";
  frame16: "div";
  frame27: "div";
  frame28: "div";
  frame29: "div";
  frame30: "div";
  frame31: "div";
  frame32: "div";
  frame33: "div";
  frame24: "a";
  frame25: "div";
  httpsChaniaRentalsStatics3EuWest2Amazonaws3: "div";
  frame26: "div";
  frame17: "div";
  frame18: "div";
  frame19: "div";
  frame20: "div";
  frame21: "div";
  frame22: "div";
  frame23: "div";
  frame34: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRecommendedVillas__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRecommendedVillas__VariantsArgs;
    args?: PlasmicRecommendedVillas__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRecommendedVillas__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRecommendedVillas__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRecommendedVillas__ArgProps,
          internalVariantPropNames: PlasmicRecommendedVillas__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRecommendedVillas__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRecommendedVillas";
  } else {
    func.displayName = `PlasmicRecommendedVillas.${nodeName}`;
  }
  return func;
}

export const PlasmicRecommendedVillas = Object.assign(
  // Top-level PlasmicRecommendedVillas renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame15: makeNodeComponent("frame15"),
    frame14: makeNodeComponent("frame14"),
    frame11: makeNodeComponent("frame11"),
    httpsChaniaRentalsStatics3EuWest2Amazonaws1: makeNodeComponent(
      "httpsChaniaRentalsStatics3EuWest2Amazonaws1"
    ),
    frame12: makeNodeComponent("frame12"),
    frame9: makeNodeComponent("frame9"),
    frame3: makeNodeComponent("frame3"),
    frame4: makeNodeComponent("frame4"),
    frame5: makeNodeComponent("frame5"),
    frame6: makeNodeComponent("frame6"),
    frame7: makeNodeComponent("frame7"),
    frame8: makeNodeComponent("frame8"),
    frame10: makeNodeComponent("frame10"),
    frame13: makeNodeComponent("frame13"),
    frame16: makeNodeComponent("frame16"),
    frame27: makeNodeComponent("frame27"),
    frame28: makeNodeComponent("frame28"),
    frame29: makeNodeComponent("frame29"),
    frame30: makeNodeComponent("frame30"),
    frame31: makeNodeComponent("frame31"),
    frame32: makeNodeComponent("frame32"),
    frame33: makeNodeComponent("frame33"),
    frame24: makeNodeComponent("frame24"),
    frame25: makeNodeComponent("frame25"),
    httpsChaniaRentalsStatics3EuWest2Amazonaws3: makeNodeComponent(
      "httpsChaniaRentalsStatics3EuWest2Amazonaws3"
    ),
    frame26: makeNodeComponent("frame26"),
    frame17: makeNodeComponent("frame17"),
    frame18: makeNodeComponent("frame18"),
    frame19: makeNodeComponent("frame19"),
    frame20: makeNodeComponent("frame20"),
    frame21: makeNodeComponent("frame21"),
    frame22: makeNodeComponent("frame22"),
    frame23: makeNodeComponent("frame23"),
    frame34: makeNodeComponent("frame34"),

    // Metadata about props expected for PlasmicRecommendedVillas
    internalVariantProps: PlasmicRecommendedVillas__VariantProps,
    internalArgProps: PlasmicRecommendedVillas__ArgProps
  }
);

export default PlasmicRecommendedVillas;
/* prettier-ignore-end */
